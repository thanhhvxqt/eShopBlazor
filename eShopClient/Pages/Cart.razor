@page "/cart"
@using System.Net;
@inject IToastService _toastSvc;
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject NavigationManager NavigationManager
@layout WebLayout;
@inject IOnChangeService _OCSvc;
@implements IDisposable
@inject AuthenticationStateProvider auth

@if (giohang.cartItems != null)
{
    <section class="h-100" style="background-color: #eee;">
        <div class="container h-100 py-5">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-10">
                    @*
                <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="fw-normal mb-0 text-black">Shopping Cart</h3>
                <div>
                <p class="mb-0"><span class="text-muted">Sort by:</span> <a href="#!" class="text-body">price <i
                class="fas fa-angle-down mt-1"></i></a></p>
                </div>
                </div>*@

                    @giohang.TongTien
                    @foreach (var item in giohang.cartItems)
                    {


                        if (item.product.Photos.Any())
                        {
                            temp = imgUrl + item.product.Photos.FirstOrDefault().FileName;
                        }
                        else
                        {
                            temp = imgUrl + "/nophoto.png";
                        }
                        <div class="card rounded-3 mb-4">
                            <div class="card-body p-4">
                                <div class="row d-flex justify-content-between align-items-center">
                                    <div class="col-md-2 col-lg-2 col-xl-2">
                                        <img src="@temp" style="width:150px;height:150px"
                                     class="img-fluid rounded-3" alt="@item.product.Name">
                                    </div>
                                    <div class="col-md-3 col-lg-3 col-xl-3">
                                        <p class="lead fw-normal mb-2">@item.product.Name</p>
                                        @*<p><span class="text-muted">Size: </span>M <span class="text-muted">Color: </span>Grey</p>*@
                                    </div>
                                    <div class="col-md-3 col-lg-3 col-xl-2 d-flex">
                                        @*<button class="btn btn-link px-2"
                                onclick="this.parentNode.querySelector('input[type=number]').stepDown()">
                                <i class="fas fa-minus"></i>
                                </button>*@

                                        <input id="txtQuantity_@item.product.Id" min="0" name="quantity" @oninput="(e) => item.quantity = int.Parse(e.Value.ToString())"
                                       @onchange="() => UpdateCart(item)" value="@item.quantity" type="number"
                                       class="form-control form-control-sm" />

                                        @*<button class="btn btn-link px-2"
                                onclick="this.parentNode.querySelector('input[type=number]').stepUp()">
                                <i class="fas fa-plus"></i>
                                </button>*@
                                    </div>
                                    <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                        <h5 class="mb-0">@item.Sotien</h5>
                                    </div>
                                    <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                        <a class="text-danger" @onclick="() => DeleteCart(item)"><i class="fas fa-trash fa-lg"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>

                    }
                    <div class="card rounded-3 mb-4">
                        <div class="card-body p-4">
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col-md-6 col-lg-6 col-xl-6">
                                </div>
                                <div class="col-md-6 col-lg-6 col-xl-6 text-end">
                                    Tổng tiền: @giohang.TongTien đồng
                                </div>
                            </div>
                        </div>
                    </div>
                    <AuthorizeView>
                        <Authorized>
                            <div class="card">
                                <div class="card-body">
                                    <a href="/checkout" class="btn btn-warning btn-block btn-lg">Đặt hàng</a>
                                </div>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <div class="card">
                                <div class="card-body">
                                    <a href="/login" class="btn btn-warning btn-block btn-lg">Đăng nhập để đặt hàng</a>
                                </div>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>


                </div>
            </div>
        </div>
    </section>
}
else
{
    <p class="text-center text-info">Giỏ hàng trống</p>
}
@code {
    private string emailAddress;
    public PostCartModel giohang;
    private double total = 0;
    protected string imgUrl = "";
    protected string temp = "";

    protected override void OnInitialized()
    {
        //emailAddress = sessionStorage.GetItem<string>("Email");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart

        if (cart == null)
        {
            giohang = new PostCartModel();
        }
        else
        {
            giohang = JsonConvert.DeserializeObject<PostCartModel>(cart);
        }

        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        _OCSvc.OnChange += StateHasChanged;

    }
    public void Dispose()
    {
        _OCSvc.OnChange -= StateHasChanged;
    }
    public bool IsHaveItemInCart()
    {
        if (giohang.cartItems != null)
        {
            _OCSvc.Invoke();
            return true;
        }
        _OCSvc.Invoke();
        return false;
    }

    private void UpdateCart(CartItem item)
    {
        if (item.product.Quantity < item.quantity)
        {
            item.quantity = item.product.Quantity;
            _toastSvc.ShowWarning($"Sản phẩm {item.product.Name} chỉ còn x{item.product.Quantity}");
        }
        item.Sotien = (double)(item.quantity * item.product.Gia);
        giohang.TongTien = Tinhtien(giohang.cartItems);
        sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));
        _OCSvc.Invoke();
    }

    private void DeleteCart(CartItem item)
    {
        if (giohang.cartItems.Count == 1)
        {
            giohang.cartItems.Clear();
            giohang.cartItems = null;
            sessionStorage.RemoveItem("cart");
        }
        else
        {
            giohang.cartItems.Remove(item);
            giohang.TongTien = Tinhtien(giohang.cartItems);
            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));
        }
        _OCSvc.Invoke();
    }
    private double Tinhtien(List<CartItem> listCart)
    {
        double tongtien = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                tongtien += listCart[i].Sotien;
            }
        }
        return tongtien;
    }
}