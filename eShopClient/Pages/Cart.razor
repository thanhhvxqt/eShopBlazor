@page "/cart"
@using System.Net;

@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject NavigationManager NavigationManager
@layout WebLayout;
@inject ICartServices _cartSvc;
<style>
    .viewProduct, .addProduct {
        border: 0;
        font-weight: 700;
        padding: 9px 5px;
        background: #ffd800;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        display: block;
        width: 186px;
        margin: 0 auto;
        color: #0e0e0e;
        text-align: center;
    }
</style>

<h1>Cart</h1>
@if(giohang.cartItems != null){
    <table class="table">
    <tr>
        <th>Title</th>
        <th>Image</th>
        <th>Quantity</th>
        <th>Price</th>
        <th>Total</th>
        <th></th>
    </tr>
    @{
        @foreach (var item in giohang.cartItems)
        {
            @if (item != null)
            {
                <tr>
                    <td>
                        @item.product.Name
                    </td>
                    <td>
                        @{
                if (item.product.Photos.Any())
                {
                    temp = imgUrl + item.product.Photos.FirstOrDefault().FileName;
                }
                else
                {
                    temp = imgUrl + "/nophoto.png";
                }
            }
            <img src="@temp" class="img-responsive" style="width:150px;height:150px"/>
                    </td>
                    <td>
                        <input type="number" id="txtQuantity_@item.product.Id"
                               @oninput="(e) => item.quantity = int.Parse(e.Value.ToString())" 
                               @onchange="() => UpdateCart(item)" value="@item.quantity" />
                    </td>
                    <td id="tdGia_@item.product.Id">@item.product.Gia</td>
                    <td id="tdTien_@item.product.Id">@item.Sotien</td>
                    <td>
                        <a href="javascript:return false;" @onclick="() => DeleteCart(item,giohang)" 
                           onmouseup="delCart(@item.product.Id)">Delete</a>
                    </td>
                </tr>
            }
        }
    }
</table>
<p>
    <div>Tổng tiền: <span id="spTotal">@giohang.TongTien</span></div>
</p>
}
else{
        <p>Giỏ hàng trống</p>
    }
<p>
    @if (@emailAddress != null && @emailAddress != "")
    {
        <button class="btn btn-link" @onclick="OrderCart">Đặt hàng</button>
    }
    else
    {
        <span>Bạn cần đăng nhập để đặt hàng</span>
    }
</p>
@code {
    private string emailAddress;
    public PostCartModel giohang;
    private double total = 0;
    protected string imgUrl = "";
    protected string temp = "";

    protected override async Task OnInitializedAsync()
    {
        emailAddress = sessionStorage.GetItem<string>("Email");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart

        if (cart == null)
        {
            giohang = new PostCartModel();
        }
        else
        {
            giohang = JsonConvert.DeserializeObject<PostCartModel>(cart);
        }

        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
    }

    private void UpdateCart(CartItem item)
    {
        item.Sotien = (double)(item.quantity * item.product.Gia);
        giohang.TongTien = Tinhtien(giohang.cartItems);
        sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));
    }

    private void DeleteCart(CartItem item, PostCartModel giohang)
    {
        _cartSvc.DeleteCart(item, giohang);
    }

    private async Task OrderCart()
    {
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        var khachhangId = sessionStorage.GetItem<string>("KhachhangId");

        giohang.khachHangId = khachhangId;

        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            StringContent content = new StringContent(JsonConvert.SerializeObject(giohang), System.Text.Encoding.UTF8, "application/json");
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            HttpResponseMessage response = await client.PostAsync(apiUrl + "Cart", content);

            if (response.StatusCode != HttpStatusCode.OK)
            {
                //error += (error == "" ? "" : "<br/>") + " - Lỗi khi gọi API.";
                //xu ly loi
                //return Content(response.ToString());
            }
            else
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (apiResponse == "-1")
                {

                }
                else // luu thanh cong
                {
                    sessionStorage.RemoveItem("cart");
                    await JSRuntime.InvokeAsync<object>("clearCart", "");
                    NavigationManager.NavigateTo("/history");
                }
            }
        }
    }

    private double Tinhtien(List<CartItem> listCart)
    {
        double tongtien = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                tongtien += listCart[i].Sotien;
            }
        }
        return tongtien;
    }
}

