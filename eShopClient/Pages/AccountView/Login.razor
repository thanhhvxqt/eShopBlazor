@page "/login"
@using System.Web;
@using System.Net;
@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json
@layout WebLayout;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IJSRuntime JSRuntime
@inject IOnChangeService _OCSvc
@inject AuthenticationStateProvider auth
@inject IToastService _toastSvc;
@inject ILoginAndRegisterService _loginSvc;
@inject IJSRuntime JSRuntime;

<section class="login_area section--padding2">
    <div class="container">

        <div class="row">
            <div class="col-lg-6 offset-lg-3" style="margin-bottom: 30px;">
                <EditForm id="signinform" Model="model" OnValidSubmit="CheckLogin">

                    <input name="__RequestVerificationToken" type="hidden" value="qtNhFYfNuzSVf87nf0NBtPVSYKHMiM0JW_aZTe8jNkpIe5WCl573-QVUARLef7Wb08J87lpA-zkL0NT9wNYpaP6GyeHSSYha0-DrQN-u1Vg1" />
                    <div class="cardify login">
                        <div class="login--header">
                            <h3>Xin chào</h3>
                            <p>Đăng nhập vào tài khoản của bạn</p>
                        </div>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="login--form">
                            <div class="form-group">
                                <label for="user_name">Tên đăng nhập:</label>
                                <InputText id="username" name="username" type="text" class="text_field" placeholder="Nhập user name bạn đã đăng ký"
                                           autocomplete="off" required autofocus @bind-Value="model.UserName"></InputText>
                                <ValidationMessage For="()=>model.UserName"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <label for="pass">Mật khẩu:</label>
                                <InputText @bind-Value="model.Password" id="pass" name="pass" type="password" class="text_field"
                                           placeholder="Nhập mật khẩu" required></InputText>
                                <ValidationMessage For="()=>model.Password"></ValidationMessage>
                            </div>
                            @*<div class="form-group">
                                <div class="custom_checkbox">
                                <input type="checkbox" id="ch2" name="rememberme" checked>
                                <label for="ch2">
                                <span class="shadow_checkbox"></span>
                                <span class="label_text">Ghi nhớ đăng nhập</span>
                                </label>
                                </div>
                                </div>*@
                            <button class="btn btn--xs" type="submit">Đăng nhập</button>
                            <br>
                            @if (!string.IsNullOrEmpty(error))
                            {
                                <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
                            }
                            <div class="login_assist">
                                <div class="row">
                                    <div class="col">
                                        <div class="recover">
                                            <p>@*<a href="recover-account.html">Bạn quên mật khẩu ?</a>*@</p>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="signup">
                                            <a href="/register">Tạo tài khoản mới</a>
                                        </div>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {

    private string error;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    ViewWebClientLogin model { get; set; } = new ViewWebClientLogin();

    protected async override Task OnInitializedAsync()
    {

        if (sessionStorage.GetItem<string>("Email") != null)
        {
            _toastSvc.ShowWarning("Bạn đã đăng nhập rồi !");
            NavigationManager.NavigateTo("/");
        }
        var user = (await AuthStat).User;

        if (!user.Identity.IsAuthenticated)
        {
            _toastSvc.ShowInfo("Bạn đã đăng nhập rồi !");
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/");
        }
    }

    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (model.Password != "")
            {
                await CheckLogin();
            }
        }
    }

    public async Task CheckLogin()
    {

        var apiUrl = config.GetSection("API")["APIUrl"].ToString();

        ViewWebClientLogin viewWebLogin = new ViewWebClientLogin() { UserName = model.UserName, Password = model.Password };
        StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin), System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await _loginSvc.Login(viewWebLogin);
        string apiResponse = await response.Content.ReadAsStringAsync();
        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:

                var viewToken = Newtonsoft.Json.JsonConvert.DeserializeObject<ViewToken>(apiResponse);
                sessionStorage.SetItem("KhachhangId", viewToken.KhachhangId);
                sessionStorage.SetItem("Email", viewToken.Email);
                sessionStorage.SetItem("UserName", viewToken.UserName);
                sessionStorage.SetItem("Name", viewToken.Name);
                sessionStorage.SetItem("AccessToken", viewToken.Token);
                sessionStorage.SetItem("NgayThamGia", viewToken.NgayThamGia);
                await auth.GetAuthenticationStateAsync();
                _toastSvc.ShowSuccess($"Đăng nhập thành công {viewToken.Email}");
                _OCSvc.Invoke();
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/", true);
                break;
            default:

                var problems = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiProblemModel>(apiResponse);
                foreach (var item in problems.Message.ToList())
                {
                    _toastSvc.ShowError(item.ToString());
                }
                break;
        }
        //if (response.StatusCode != HttpStatusCode.OK)
        //{
        //    error += (error == "" ? "" : "<br/>") + " - Lỗi khi gọi API.";
        //}
        //else
        //{

        //}
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", "Đăng nhập | Web bán thức ăn"); ;
    }
}