@page "/login"
@using System.Web;
@using System.Net;
@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json
@layout WebLayout;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IJSRuntime JSRuntime
@inject IOnChangeService _OCSvc
@inject AuthenticationStateProvider auth
@inject IToastService _toastSvc;

<section class="login_area section--padding2">
    <div class="container">
        
        <div class="row">
            <div class="col-lg-6 offset-lg-3" style="margin-bottom: 30px;">
                <EditForm id="signinform" Model="viewWebLoginModel" OnValidSubmit="CheckLogin">

                    <input name="__RequestVerificationToken" type="hidden" value="qtNhFYfNuzSVf87nf0NBtPVSYKHMiM0JW_aZTe8jNkpIe5WCl573-QVUARLef7Wb08J87lpA-zkL0NT9wNYpaP6GyeHSSYha0-DrQN-u1Vg1" />
                    <div class="cardify login">
                        <div class="login--header">
                            <h3>Xin chào</h3>
                            <p>Đăng nhập vào tài khoản của bạn</p>
                        </div>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="login--form">
                            <div class="form-group">
                                <label for="user_name">Email:</label>
                                <InputText id="email" name="email" type="text" class="text_field" placeholder="Nhập email bạn đã đăng ký"
                                           autocomplete="off" required autofocus @bind-Value="viewWebLoginModel.Email"></InputText>
                                <ValidationMessage For="()=>viewWebLoginModel.Email"></ValidationMessage>
                            </div>
                            <div class="form-group">
                                <label for="pass">Mật khẩu:</label>
                                <InputText @bind-Value="viewWebLoginModel.Password" id="pass" name="pass" type="password" class="text_field"
                                           placeholder="Nhập mật khẩu" required></InputText>
                                <ValidationMessage For="()=>viewWebLoginModel.Password"></ValidationMessage>
                            </div>
                            @*<div class="form-group">
                            <div class="custom_checkbox">
                            <input type="checkbox" id="ch2" name="rememberme" checked>
                            <label for="ch2">
                            <span class="shadow_checkbox"></span>
                            <span class="label_text">Ghi nhớ đăng nhập</span>
                            </label>
                            </div>
                            </div>*@
                            <button class="btn btn--xs" type="submit">Đăng nhập</button>
                            <br>
                            <br>
                            <div class="login_assist">
                                <div class="row">
                                    <div class="col">
                                        <div class="recover">
                                            <p><a href="recover-account.html">Bạn quên mật khẩu ?</a></p>

                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="signup">
                                            <a href="signup.html">Tạo tài khoản mới</a>
                                        </div>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {

    private string error;

    ViewWebLogin viewWebLoginModel { get; set; } = new ViewWebLogin();

    protected override void OnInitialized()
    {

        if (sessionStorage.GetItem<string>("Email") != null)
        {
            _toastSvc.ShowWarning("Bạn đã đăng nhập rồi !");
            NavigationManager.NavigateTo("/");
        }

    }

    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (viewWebLoginModel.Password != "")
            {
                CheckLogin();
            }
        }
    }

    public async Task CheckLogin()
    {
        error = "";
        if (viewWebLoginModel.Email == "")
        {
            error = " - Bạn cần nhập email.";
        }
        if (viewWebLoginModel.Password == "")
        {
            error += (error == "" ? "" : "<br/>") + " - Bạn cần nhập password.";
        }
        if (error == "")
        {

            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            using (var client = new HttpClient())
            {
                ViewWebLogin viewWebLogin = new ViewWebLogin() { Email = viewWebLoginModel.Email, Password = viewWebLoginModel.Password };
                client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
                //client.DefaultRequestHeaders.Authorization =new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(apiUrl + "Token", content);
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    error += (error == "" ? "" : "<br/>") + " - Lỗi khi gọi API.";
                    //xu ly loi
                    //return Content(response.ToString());
                }
                else
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();

                    var viewToken = Newtonsoft.Json.JsonConvert.DeserializeObject<ViewToken>(apiResponse);

                    var accessToken = viewToken.Token;
                    sessionStorage.SetItem("KhachhangId", viewToken.KhachhangId);
                    sessionStorage.SetItem("Email", viewToken.Email);
                    sessionStorage.SetItem("UserName", viewToken.Email);
                    sessionStorage.SetItem("Name", viewToken.Name);
                    //Console.WriteLine("email: " + viewToken.Email);
                    sessionStorage.SetItem("AccessToken", accessToken);
                    await auth.GetAuthenticationStateAsync();
                    //await JSRuntime.InvokeAsync<object>("refreshMenu", new {email= email});
                    //await JSRuntime.InvokeAsync<object>("CalledJSFunctionWithParameter", "Jignesh Trivedi");
                    _toastSvc.ShowSuccess($"Đăng nhập thành công {viewToken.Email}\n{viewToken.KhachhangId}");
                    _OCSvc.Invoke();
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    }
}