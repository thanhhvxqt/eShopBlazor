@page "/checkout"
@using System.Net;
@using Newtonsoft.Json

@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject NavigationManager NavigationManager
@layout WebLayout;
@inject IOnChangeService _OCSvc;
@inject IToastService _toastSvc;
@inject AuthenticationStateProvider auth
<h1 class="text-center">Check Out</h1>
<br />
<div class="row">
    <div class="col-6 ms-1">
        <EditForm style="margin-left: 20px" Model="model" OnValidSubmit="OrderCart">
            <!-- 2 column grid layout with text inputs for the first and last names -->
            <DataAnnotationsValidator />
                        <ValidationSummary />
            <div class="row">
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form6Example1">Tên người nhận</label>
                        <InputText required type="text" @bind-Value="model.tenNguoiNhan" id="form6Example1" class="form-control" placeholder="Nhập tên người nhận" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form6Example2">Số điện thoại</label>
                        <InputText type="text" @bind-Value="model.phoneNumber" id="form6Example2" class="form-control" placeholder="Nhập số điện thoại" />
                    </div>
                </div>
            </div>
            <br />
            <!-- Text input -->
            <div class="form-outline mb-4">
                <label class="form-label" for="form6Example3">Địa chỉ</label>
                <InputText type="text" @bind-Value="model.address" id="form6Example3" class="form-control" placeholder="Nhập địa chỉ" />
            </div>

            <!-- Message input -->
            <div class="form-outline mb-4">
                <label class="form-label" for="form6Example7">Ghi chú</label>
                <InputTextArea class="form-control" @bind-Value="model.ghiChu" id="form6Example7" rows="4" placeholder="Nhập ghi chú"></InputTextArea>
            </div>

            <!-- Submit button -->
            <button type="submit"style="
    height: 46px ;" class="btn btn-primary btn-block mb-4">
                Đặt hàng
            </button>
        </EditForm>
    </div>
    <div class="col-6">
        <table class="table table-borderless">
            <thead>
                <tr>
                    <th scope="col" class="text-info">Tên sản phẩm</th>
                    <th scope="col" class="text-info">Số lượng</th>
                    <th scope="col" class="text-info">Số tiền</th>
                </tr>
            </thead>
            <tbody>
                @if (giohang.cartItems != null)
                {
                    @foreach (var item in giohang.cartItems)
                    {
                        <tr>
                            <td>@item.product.Name</td>
                            <td>@item.quantity</td>
                            <td>@item.Sotien đồng</td>
                        </tr>
                    }
                    <tr>
                        <td scope="row">Tổng tiền</td>
                        <td></td>
                        <td class="text-danger">@giohang.TongTien đồng</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td><h3>Giỏ hàng trống</h3></td>

                    </tr>

                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private string emailAddress;
    public PostCartModel giohang;
    private double total = 0;
    protected string imgUrl = "";
    protected string temp = "";
    public PostCartModel model { get; set; } = new PostCartModel();
    [CascadingParameter] protected Task<AuthenticationState> AuthStat{ get; set; }

    protected override void OnInitialized()
    {
        emailAddress = sessionStorage.GetItem<string>("Email");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart

        if (cart == null)
        {
            giohang = new PostCartModel();
        }
        else
        {
            giohang = JsonConvert.DeserializeObject<PostCartModel>(cart);
        }

        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
    }
    private async Task OrderCart()
    {
        foreach(var item in giohang.cartItems)
        {
            if(item.quantity > item.product.Quantity)
            {
                _toastSvc.ShowError($"Có lỗi về số lượng món {item.product.Name}");
                return;
            }
        }
        if (giohang.cartItems == null || giohang.cartItems.Count < 1)
        {
            _toastSvc.ShowError("Không có sản phẩm nào trong giỏ hàng vui lòng kiểm tra lại !");
            return;
        }
        await auth.GetAuthenticationStateAsync();
        if(!(await AuthStat).User.Identity.IsAuthenticated)
        {
            _toastSvc.ShowError("Có lỗi xảy ra vui lòng đăng nhập lại !");
            return;
        }
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        var accessToken = (await AuthStat).User.Claims.FirstOrDefault(x=>x.Type == "token").Value.ToString();
        Console.WriteLine(accessToken);
        var khachhangId = (await AuthStat).User.Claims.FirstOrDefault(x=>x.Type == "khachid").Value.ToString();

        giohang.khachHangId = khachhangId;
        giohang.tenNguoiNhan = model.tenNguoiNhan;
        giohang.address = model.address;
        giohang.phoneNumber = model.phoneNumber;
        giohang.ghiChu = model.ghiChu;
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            StringContent content = new StringContent(JsonConvert.SerializeObject(giohang), System.Text.Encoding.UTF8, "application/json");
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            HttpResponseMessage response = await client.PostAsync(apiUrl + "Cart", content);

            if (response.StatusCode != HttpStatusCode.OK)
            {
                //error += (error == "" ? "" : "<br/>") + " - Lỗi khi gọi API.";
                //xu ly loi
                //return Content(response.ToString());
            }
            else
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                if (apiResponse == "-1")
                {

                }
                else // luu thanh cong
                {
                    sessionStorage.RemoveItem("cart");
                    _toastSvc.ShowSuccess("Đặt hàng thành công !");
                    NavigationManager.NavigateTo("/history");
                }
            }
        }
        _OCSvc.Invoke();
    }
    [Inject] IJSRuntime JSRuntime { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", $"Đặt hàng | Web bán thức ăn"); ;
    }
}
